
ATmega32.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000096a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800060  00800060  0000096a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000096a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000099c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000200  00000000  00000000  000009d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000222b  00000000  00000000  00000bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c06  00000000  00000000  00002e03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000136e  00000000  00000000  00003a09  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000480  00000000  00000000  00004d78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000092b  00000000  00000000  000051f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013e3  00000000  00000000  00005b23  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00006f06  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 e9 03 	jmp	0x7d2	; 0x7d2 <__vector_1>
   8:	0c 94 12 04 	jmp	0x824	; 0x824 <__vector_2>
   c:	0c 94 3b 04 	jmp	0x876	; 0x876 <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	f1 00       	.word	0x00f1	; ????
  56:	0e 01       	movw	r0, r28
  58:	2b 01       	movw	r4, r22
  5a:	48 01       	movw	r8, r16
  5c:	65 01       	movw	r12, r10
  5e:	82 01       	movw	r16, r4
  60:	9f 01       	movw	r18, r30
  62:	bc 01       	movw	r22, r24
  64:	d9 01       	movw	r26, r18
  66:	f6 01       	movw	r30, r12

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf e5       	ldi	r28, 0x5F	; 95
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	20 e0       	ldi	r18, 0x00	; 0
  76:	a0 e6       	ldi	r26, 0x60	; 96
  78:	b0 e0       	ldi	r27, 0x00	; 0
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a7 36       	cpi	r26, 0x67	; 103
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  88:	0c 94 79 04 	jmp	0x8f2	; 0x8f2 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <Flashing>:
		}
	}
}

void Flashing(void)
{
  90:	cf 93       	push	r28
  92:	c6 e0       	ldi	r28, 0x06	; 6
	u8 i=0;
	while(i<=5)
	{
		HRELAY_VidOFF(RELAY2);
  94:	81 e0       	ldi	r24, 0x01	; 1
  96:	0e 94 b6 00 	call	0x16c	; 0x16c <HRELAY_VidOFF>
		HSSD_VidSSDON();
  9a:	0e 94 73 02 	call	0x4e6	; 0x4e6 <HSSD_VidSSDON>
		HBUZZER_VidON();
  9e:	0e 94 94 00 	call	0x128	; 0x128 <HBUZZER_VidON>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	2f ef       	ldi	r18, 0xFF	; 255
  a4:	89 e6       	ldi	r24, 0x69	; 105
  a6:	98 e1       	ldi	r25, 0x18	; 24
  a8:	21 50       	subi	r18, 0x01	; 1
  aa:	80 40       	sbci	r24, 0x00	; 0
  ac:	90 40       	sbci	r25, 0x00	; 0
  ae:	e1 f7       	brne	.-8      	; 0xa8 <Flashing+0x18>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <Flashing+0x22>
  b2:	00 00       	nop
		_delay_ms(500);
		HSSD_VidSSDOFF();
  b4:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <HSSD_VidSSDOFF>
		HBUZZER_VidOFF();
  b8:	0e 94 99 00 	call	0x132	; 0x132 <HBUZZER_VidOFF>
		HRELAY_VidON(RELAY2);
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	0e 94 aa 00 	call	0x154	; 0x154 <HRELAY_VidON>
  c2:	2f ef       	ldi	r18, 0xFF	; 255
  c4:	89 e6       	ldi	r24, 0x69	; 105
  c6:	98 e1       	ldi	r25, 0x18	; 24
  c8:	21 50       	subi	r18, 0x01	; 1
  ca:	80 40       	sbci	r24, 0x00	; 0
  cc:	90 40       	sbci	r25, 0x00	; 0
  ce:	e1 f7       	brne	.-8      	; 0xc8 <Flashing+0x38>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <Flashing+0x42>
  d2:	00 00       	nop
  d4:	c1 50       	subi	r28, 0x01	; 1
}

void Flashing(void)
{
	u8 i=0;
	while(i<=5)
  d6:	f1 f6       	brne	.-68     	; 0x94 <Flashing+0x4>
		HBUZZER_VidOFF();
		HRELAY_VidON(RELAY2);
		_delay_ms(500);
		i++;
	}
  d8:	cf 91       	pop	r28
  da:	08 95       	ret

000000dc <main>:
u8 counter=0;
void Flashing(void);

int main(void)
{
	HBUZZER_VidINIT();
  dc:	0e 94 8f 00 	call	0x11e	; 0x11e <HBUZZER_VidINIT>
	HRELAY_VidInit(RELAY2);
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	0e 94 9e 00 	call	0x13c	; 0x13c <HRELAY_VidInit>
	HSSD_VidInit();
  e6:	0e 94 c2 00 	call	0x184	; 0x184 <HSSD_VidInit>
  ea:	14 c0       	rjmp	.+40     	; 0x114 <main+0x38>
	while (1)
	{
		while(counter < 100)
		{
			HSSD_VidDISPLAY(counter , 500);
  ec:	64 ef       	ldi	r22, 0xF4	; 244
  ee:	71 e0       	ldi	r23, 0x01	; 1
  f0:	0e 94 13 02 	call	0x426	; 0x426 <HSSD_VidDISPLAY>
			counter++;
  f4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  f8:	8f 5f       	subi	r24, 0xFF	; 255
  fa:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
			if(counter ==100)
  fe:	84 36       	cpi	r24, 0x64	; 100
 100:	49 f4       	brne	.+18     	; 0x114 <main+0x38>
			{
				Flashing();
 102:	0e 94 48 00 	call	0x90	; 0x90 <Flashing>
				HBUZZER_VidOFF();
 106:	0e 94 99 00 	call	0x132	; 0x132 <HBUZZER_VidOFF>
				HRELAY_VidOFF(RELAY2);
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	0e 94 b6 00 	call	0x16c	; 0x16c <HRELAY_VidOFF>
				counter =0;
 110:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
	HBUZZER_VidINIT();
	HRELAY_VidInit(RELAY2);
	HSSD_VidInit();
	while (1)
	{
		while(counter < 100)
 114:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 118:	84 36       	cpi	r24, 0x64	; 100
 11a:	40 f3       	brcs	.-48     	; 0xec <main+0x10>
 11c:	fd cf       	rjmp	.-6      	; 0x118 <main+0x3c>

0000011e <HBUZZER_VidINIT>:
#define F_CPU 16000000UL
#include <util/delay.h>

void HBUZZER_VidINIT(void)
{
	MDIO_ERROR_STATE_t_SetPinDirection( BUZZER_PIN, OUTPUT);
 11e:	61 e0       	ldi	r22, 0x01	; 1
 120:	83 e2       	ldi	r24, 0x23	; 35
 122:	0e 94 85 02 	call	0x50a	; 0x50a <MDIO_ERROR_STATE_t_SetPinDirection>
 126:	08 95       	ret

00000128 <HBUZZER_VidON>:
}

void HBUZZER_VidON(void)
{
	MDIO_ERROR_STATE_t_SetPinValue(BUZZER_PIN,HIGH);
 128:	61 e0       	ldi	r22, 0x01	; 1
 12a:	83 e2       	ldi	r24, 0x23	; 35
 12c:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
 130:	08 95       	ret

00000132 <HBUZZER_VidOFF>:
}

void HBUZZER_VidOFF(void)
{
	MDIO_ERROR_STATE_t_SetPinValue(BUZZER_PIN,LOW);
 132:	60 e0       	ldi	r22, 0x00	; 0
 134:	83 e2       	ldi	r24, 0x23	; 35
 136:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
 13a:	08 95       	ret

0000013c <HRELAY_VidInit>:
#include "HRELAY_INTERFACE.h"


void HRELAY_VidInit(u8 Copy_u8RelayNumber)
{
	if(Copy_u8RelayNumber == RELAY1)
 13c:	81 11       	cpse	r24, r1
 13e:	05 c0       	rjmp	.+10     	; 0x14a <HRELAY_VidInit+0xe>
		MDIO_ERROR_STATE_t_SetPinDirection( RELAY_PIN1 ,OUTPUT);
 140:	61 e0       	ldi	r22, 0x01	; 1
 142:	82 e2       	ldi	r24, 0x22	; 34
 144:	0e 94 85 02 	call	0x50a	; 0x50a <MDIO_ERROR_STATE_t_SetPinDirection>
 148:	08 95       	ret
	else
		MDIO_ERROR_STATE_t_SetPinDirection( RELAY_PIN2 ,OUTPUT);
 14a:	61 e0       	ldi	r22, 0x01	; 1
 14c:	81 e2       	ldi	r24, 0x21	; 33
 14e:	0e 94 85 02 	call	0x50a	; 0x50a <MDIO_ERROR_STATE_t_SetPinDirection>
 152:	08 95       	ret

00000154 <HRELAY_VidON>:
}


void HRELAY_VidON(u8 Copy_u8RelayNumber)
{
	if(Copy_u8RelayNumber == RELAY1)
 154:	81 11       	cpse	r24, r1
 156:	05 c0       	rjmp	.+10     	; 0x162 <HRELAY_VidON+0xe>
		MDIO_ERROR_STATE_t_SetPinValue(RELAY_PIN1,HIGH);
 158:	61 e0       	ldi	r22, 0x01	; 1
 15a:	82 e2       	ldi	r24, 0x22	; 34
 15c:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
 160:	08 95       	ret
	else
		MDIO_ERROR_STATE_t_SetPinValue(RELAY_PIN2,HIGH);
 162:	61 e0       	ldi	r22, 0x01	; 1
 164:	81 e2       	ldi	r24, 0x21	; 33
 166:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
 16a:	08 95       	ret

0000016c <HRELAY_VidOFF>:
}


void HRELAY_VidOFF(u8 Copy_u8RelayNumber)
{
	if(Copy_u8RelayNumber == RELAY1)
 16c:	81 11       	cpse	r24, r1
 16e:	05 c0       	rjmp	.+10     	; 0x17a <HRELAY_VidOFF+0xe>
		MDIO_ERROR_STATE_t_SetPinValue(RELAY_PIN1,LOW);
 170:	60 e0       	ldi	r22, 0x00	; 0
 172:	82 e2       	ldi	r24, 0x22	; 34
 174:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
 178:	08 95       	ret
	else
		MDIO_ERROR_STATE_t_SetPinValue(RELAY_PIN2,LOW);
 17a:	60 e0       	ldi	r22, 0x00	; 0
 17c:	81 e2       	ldi	r24, 0x21	; 33
 17e:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
 182:	08 95       	ret

00000184 <HSSD_VidInit>:
#define F_CPU 16000000UL
#include <util/delay.h>

void HSSD_VidInit(void)
{
	MDIO_ERROR_STATE_t_SetPinDirection(SSD_PINA,OUTPUT);
 184:	61 e0       	ldi	r22, 0x01	; 1
 186:	8b e0       	ldi	r24, 0x0B	; 11
 188:	0e 94 85 02 	call	0x50a	; 0x50a <MDIO_ERROR_STATE_t_SetPinDirection>
	MDIO_ERROR_STATE_t_SetPinDirection(SSD_PINB,OUTPUT);
 18c:	61 e0       	ldi	r22, 0x01	; 1
 18e:	8c e0       	ldi	r24, 0x0C	; 12
 190:	0e 94 85 02 	call	0x50a	; 0x50a <MDIO_ERROR_STATE_t_SetPinDirection>
	MDIO_ERROR_STATE_t_SetPinDirection(SSD_PINC,OUTPUT);
 194:	61 e0       	ldi	r22, 0x01	; 1
 196:	8d e0       	ldi	r24, 0x0D	; 13
 198:	0e 94 85 02 	call	0x50a	; 0x50a <MDIO_ERROR_STATE_t_SetPinDirection>
	MDIO_ERROR_STATE_t_SetPinDirection(SSD_PIND,OUTPUT);
 19c:	61 e0       	ldi	r22, 0x01	; 1
 19e:	8e e0       	ldi	r24, 0x0E	; 14
 1a0:	0e 94 85 02 	call	0x50a	; 0x50a <MDIO_ERROR_STATE_t_SetPinDirection>
	MDIO_ERROR_STATE_t_SetPinDirection(SSD_PINE,OUTPUT);
 1a4:	61 e0       	ldi	r22, 0x01	; 1
 1a6:	8f e0       	ldi	r24, 0x0F	; 15
 1a8:	0e 94 85 02 	call	0x50a	; 0x50a <MDIO_ERROR_STATE_t_SetPinDirection>
	MDIO_ERROR_STATE_t_SetPinDirection(SSD_PINF,OUTPUT);
 1ac:	61 e0       	ldi	r22, 0x01	; 1
 1ae:	80 e1       	ldi	r24, 0x10	; 16
 1b0:	0e 94 85 02 	call	0x50a	; 0x50a <MDIO_ERROR_STATE_t_SetPinDirection>
	MDIO_ERROR_STATE_t_SetPinDirection(SSD_PING,OUTPUT);
 1b4:	61 e0       	ldi	r22, 0x01	; 1
 1b6:	81 e1       	ldi	r24, 0x11	; 17
 1b8:	0e 94 85 02 	call	0x50a	; 0x50a <MDIO_ERROR_STATE_t_SetPinDirection>
	
	MDIO_ERROR_STATE_t_SetPinDirection(SSD_EN_PIN1,OUTPUT);
 1bc:	61 e0       	ldi	r22, 0x01	; 1
 1be:	84 e2       	ldi	r24, 0x24	; 36
 1c0:	0e 94 85 02 	call	0x50a	; 0x50a <MDIO_ERROR_STATE_t_SetPinDirection>
	MDIO_ERROR_STATE_t_SetPinDirection(SSD_EN_PIN2,OUTPUT);
 1c4:	61 e0       	ldi	r22, 0x01	; 1
 1c6:	85 e2       	ldi	r24, 0x25	; 37
 1c8:	0e 94 85 02 	call	0x50a	; 0x50a <MDIO_ERROR_STATE_t_SetPinDirection>
 1cc:	08 95       	ret

000001ce <HSSD_VidWriteNumber>:
}

void HSSD_VidWriteNumber(u8 Copy_u8NO)
{
	switch(Copy_u8NO)
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	8a 30       	cpi	r24, 0x0A	; 10
 1d2:	91 05       	cpc	r25, r1
 1d4:	08 f0       	brcs	.+2      	; 0x1d8 <HSSD_VidWriteNumber+0xa>
 1d6:	26 c1       	rjmp	.+588    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
 1d8:	fc 01       	movw	r30, r24
 1da:	e6 5d       	subi	r30, 0xD6	; 214
 1dc:	ff 4f       	sbci	r31, 0xFF	; 255
 1de:	0c 94 64 04 	jmp	0x8c8	; 0x8c8 <__tablejump2__>
	{
		case 0:
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINA, HIGH);
 1e2:	61 e0       	ldi	r22, 0x01	; 1
 1e4:	8b e0       	ldi	r24, 0x0B	; 11
 1e6:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINB, HIGH);
 1ea:	61 e0       	ldi	r22, 0x01	; 1
 1ec:	8c e0       	ldi	r24, 0x0C	; 12
 1ee:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINC, HIGH);
 1f2:	61 e0       	ldi	r22, 0x01	; 1
 1f4:	8d e0       	ldi	r24, 0x0D	; 13
 1f6:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PIND, HIGH);
 1fa:	61 e0       	ldi	r22, 0x01	; 1
 1fc:	8e e0       	ldi	r24, 0x0E	; 14
 1fe:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINE, HIGH);
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	8f e0       	ldi	r24, 0x0F	; 15
 206:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINF, HIGH);
 20a:	61 e0       	ldi	r22, 0x01	; 1
 20c:	80 e1       	ldi	r24, 0x10	; 16
 20e:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PING, LOW);
 212:	60 e0       	ldi	r22, 0x00	; 0
 214:	81 e1       	ldi	r24, 0x11	; 17
 216:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			break;
 21a:	08 95       	ret
		
		case 1:
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINA, LOW);
 21c:	60 e0       	ldi	r22, 0x00	; 0
 21e:	8b e0       	ldi	r24, 0x0B	; 11
 220:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINB, HIGH);
 224:	61 e0       	ldi	r22, 0x01	; 1
 226:	8c e0       	ldi	r24, 0x0C	; 12
 228:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINC, HIGH);
 22c:	61 e0       	ldi	r22, 0x01	; 1
 22e:	8d e0       	ldi	r24, 0x0D	; 13
 230:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PIND, LOW);
 234:	60 e0       	ldi	r22, 0x00	; 0
 236:	8e e0       	ldi	r24, 0x0E	; 14
 238:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINE, LOW);
 23c:	60 e0       	ldi	r22, 0x00	; 0
 23e:	8f e0       	ldi	r24, 0x0F	; 15
 240:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINF, LOW);
 244:	60 e0       	ldi	r22, 0x00	; 0
 246:	80 e1       	ldi	r24, 0x10	; 16
 248:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PING, LOW);
 24c:	60 e0       	ldi	r22, 0x00	; 0
 24e:	81 e1       	ldi	r24, 0x11	; 17
 250:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			break;
 254:	08 95       	ret
		
		case 2:
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINA, HIGH);
 256:	61 e0       	ldi	r22, 0x01	; 1
 258:	8b e0       	ldi	r24, 0x0B	; 11
 25a:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINB, HIGH);
 25e:	61 e0       	ldi	r22, 0x01	; 1
 260:	8c e0       	ldi	r24, 0x0C	; 12
 262:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINC, LOW);
 266:	60 e0       	ldi	r22, 0x00	; 0
 268:	8d e0       	ldi	r24, 0x0D	; 13
 26a:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PIND, HIGH);
 26e:	61 e0       	ldi	r22, 0x01	; 1
 270:	8e e0       	ldi	r24, 0x0E	; 14
 272:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINE, HIGH);
 276:	61 e0       	ldi	r22, 0x01	; 1
 278:	8f e0       	ldi	r24, 0x0F	; 15
 27a:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINF, LOW);
 27e:	60 e0       	ldi	r22, 0x00	; 0
 280:	80 e1       	ldi	r24, 0x10	; 16
 282:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PING, HIGH);
 286:	61 e0       	ldi	r22, 0x01	; 1
 288:	81 e1       	ldi	r24, 0x11	; 17
 28a:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			break;
 28e:	08 95       	ret
		
		case 3:
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINA, HIGH);
 290:	61 e0       	ldi	r22, 0x01	; 1
 292:	8b e0       	ldi	r24, 0x0B	; 11
 294:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINB, HIGH);
 298:	61 e0       	ldi	r22, 0x01	; 1
 29a:	8c e0       	ldi	r24, 0x0C	; 12
 29c:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINC, HIGH);
 2a0:	61 e0       	ldi	r22, 0x01	; 1
 2a2:	8d e0       	ldi	r24, 0x0D	; 13
 2a4:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PIND, HIGH);
 2a8:	61 e0       	ldi	r22, 0x01	; 1
 2aa:	8e e0       	ldi	r24, 0x0E	; 14
 2ac:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINE, LOW);
 2b0:	60 e0       	ldi	r22, 0x00	; 0
 2b2:	8f e0       	ldi	r24, 0x0F	; 15
 2b4:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINF, LOW);
 2b8:	60 e0       	ldi	r22, 0x00	; 0
 2ba:	80 e1       	ldi	r24, 0x10	; 16
 2bc:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PING, HIGH);
 2c0:	61 e0       	ldi	r22, 0x01	; 1
 2c2:	81 e1       	ldi	r24, 0x11	; 17
 2c4:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			break;
 2c8:	08 95       	ret
		
		case 4:
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINA, LOW);
 2ca:	60 e0       	ldi	r22, 0x00	; 0
 2cc:	8b e0       	ldi	r24, 0x0B	; 11
 2ce:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINB, HIGH);
 2d2:	61 e0       	ldi	r22, 0x01	; 1
 2d4:	8c e0       	ldi	r24, 0x0C	; 12
 2d6:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINC, HIGH);
 2da:	61 e0       	ldi	r22, 0x01	; 1
 2dc:	8d e0       	ldi	r24, 0x0D	; 13
 2de:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PIND, LOW);
 2e2:	60 e0       	ldi	r22, 0x00	; 0
 2e4:	8e e0       	ldi	r24, 0x0E	; 14
 2e6:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINE, LOW);
 2ea:	60 e0       	ldi	r22, 0x00	; 0
 2ec:	8f e0       	ldi	r24, 0x0F	; 15
 2ee:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINF, HIGH);
 2f2:	61 e0       	ldi	r22, 0x01	; 1
 2f4:	80 e1       	ldi	r24, 0x10	; 16
 2f6:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PING, HIGH);
 2fa:	61 e0       	ldi	r22, 0x01	; 1
 2fc:	81 e1       	ldi	r24, 0x11	; 17
 2fe:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			break;
 302:	08 95       	ret
		
		case 5:
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINA, HIGH);
 304:	61 e0       	ldi	r22, 0x01	; 1
 306:	8b e0       	ldi	r24, 0x0B	; 11
 308:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINB, LOW);
 30c:	60 e0       	ldi	r22, 0x00	; 0
 30e:	8c e0       	ldi	r24, 0x0C	; 12
 310:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINC, HIGH);
 314:	61 e0       	ldi	r22, 0x01	; 1
 316:	8d e0       	ldi	r24, 0x0D	; 13
 318:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PIND, HIGH);
 31c:	61 e0       	ldi	r22, 0x01	; 1
 31e:	8e e0       	ldi	r24, 0x0E	; 14
 320:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINE, LOW);
 324:	60 e0       	ldi	r22, 0x00	; 0
 326:	8f e0       	ldi	r24, 0x0F	; 15
 328:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINF, HIGH);
 32c:	61 e0       	ldi	r22, 0x01	; 1
 32e:	80 e1       	ldi	r24, 0x10	; 16
 330:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PING, HIGH);
 334:	61 e0       	ldi	r22, 0x01	; 1
 336:	81 e1       	ldi	r24, 0x11	; 17
 338:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			break;
 33c:	08 95       	ret
		
		case 6:
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINA, HIGH);
 33e:	61 e0       	ldi	r22, 0x01	; 1
 340:	8b e0       	ldi	r24, 0x0B	; 11
 342:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINB, LOW);
 346:	60 e0       	ldi	r22, 0x00	; 0
 348:	8c e0       	ldi	r24, 0x0C	; 12
 34a:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINC, HIGH);
 34e:	61 e0       	ldi	r22, 0x01	; 1
 350:	8d e0       	ldi	r24, 0x0D	; 13
 352:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PIND, HIGH);
 356:	61 e0       	ldi	r22, 0x01	; 1
 358:	8e e0       	ldi	r24, 0x0E	; 14
 35a:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINE, HIGH);
 35e:	61 e0       	ldi	r22, 0x01	; 1
 360:	8f e0       	ldi	r24, 0x0F	; 15
 362:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINF, HIGH);
 366:	61 e0       	ldi	r22, 0x01	; 1
 368:	80 e1       	ldi	r24, 0x10	; 16
 36a:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PING, HIGH);
 36e:	61 e0       	ldi	r22, 0x01	; 1
 370:	81 e1       	ldi	r24, 0x11	; 17
 372:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			break;
 376:	08 95       	ret
		
		case 7:
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINA, HIGH);
 378:	61 e0       	ldi	r22, 0x01	; 1
 37a:	8b e0       	ldi	r24, 0x0B	; 11
 37c:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINB, HIGH);
 380:	61 e0       	ldi	r22, 0x01	; 1
 382:	8c e0       	ldi	r24, 0x0C	; 12
 384:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINC, HIGH);
 388:	61 e0       	ldi	r22, 0x01	; 1
 38a:	8d e0       	ldi	r24, 0x0D	; 13
 38c:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PIND, LOW);
 390:	60 e0       	ldi	r22, 0x00	; 0
 392:	8e e0       	ldi	r24, 0x0E	; 14
 394:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINE, LOW);
 398:	60 e0       	ldi	r22, 0x00	; 0
 39a:	8f e0       	ldi	r24, 0x0F	; 15
 39c:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINF, LOW);
 3a0:	60 e0       	ldi	r22, 0x00	; 0
 3a2:	80 e1       	ldi	r24, 0x10	; 16
 3a4:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PING, LOW);
 3a8:	60 e0       	ldi	r22, 0x00	; 0
 3aa:	81 e1       	ldi	r24, 0x11	; 17
 3ac:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			break;
 3b0:	08 95       	ret
		
		case 8:
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINA, HIGH);
 3b2:	61 e0       	ldi	r22, 0x01	; 1
 3b4:	8b e0       	ldi	r24, 0x0B	; 11
 3b6:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINB, HIGH);
 3ba:	61 e0       	ldi	r22, 0x01	; 1
 3bc:	8c e0       	ldi	r24, 0x0C	; 12
 3be:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINC, HIGH);
 3c2:	61 e0       	ldi	r22, 0x01	; 1
 3c4:	8d e0       	ldi	r24, 0x0D	; 13
 3c6:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PIND, HIGH);
 3ca:	61 e0       	ldi	r22, 0x01	; 1
 3cc:	8e e0       	ldi	r24, 0x0E	; 14
 3ce:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINE, HIGH);
 3d2:	61 e0       	ldi	r22, 0x01	; 1
 3d4:	8f e0       	ldi	r24, 0x0F	; 15
 3d6:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINF, HIGH);
 3da:	61 e0       	ldi	r22, 0x01	; 1
 3dc:	80 e1       	ldi	r24, 0x10	; 16
 3de:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PING, HIGH);
 3e2:	61 e0       	ldi	r22, 0x01	; 1
 3e4:	81 e1       	ldi	r24, 0x11	; 17
 3e6:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			break;
 3ea:	08 95       	ret
		
		case 9:
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINA, HIGH);
 3ec:	61 e0       	ldi	r22, 0x01	; 1
 3ee:	8b e0       	ldi	r24, 0x0B	; 11
 3f0:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINB, HIGH);
 3f4:	61 e0       	ldi	r22, 0x01	; 1
 3f6:	8c e0       	ldi	r24, 0x0C	; 12
 3f8:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINC, HIGH);
 3fc:	61 e0       	ldi	r22, 0x01	; 1
 3fe:	8d e0       	ldi	r24, 0x0D	; 13
 400:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PIND, HIGH);
 404:	61 e0       	ldi	r22, 0x01	; 1
 406:	8e e0       	ldi	r24, 0x0E	; 14
 408:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINE, LOW);
 40c:	60 e0       	ldi	r22, 0x00	; 0
 40e:	8f e0       	ldi	r24, 0x0F	; 15
 410:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PINF, HIGH);
 414:	61 e0       	ldi	r22, 0x01	; 1
 416:	80 e1       	ldi	r24, 0x10	; 16
 418:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
			MDIO_ERROR_STATE_t_SetPinValue(SSD_PING, HIGH);
 41c:	61 e0       	ldi	r22, 0x01	; 1
 41e:	81 e1       	ldi	r24, 0x11	; 17
 420:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
 424:	08 95       	ret

00000426 <HSSD_VidDISPLAY>:
			break;
	}
}

void HSSD_VidDISPLAY(u8 Copy_u8NO , u16 DiplayTime)
{
 426:	ef 92       	push	r14
 428:	ff 92       	push	r15
 42a:	0f 93       	push	r16
 42c:	1f 93       	push	r17
 42e:	cf 93       	push	r28
 430:	df 93       	push	r29
 432:	9b 01       	movw	r18, r22
	u8 right_number = Copy_u8NO %10;
 434:	0d ec       	ldi	r16, 0xCD	; 205
 436:	80 9f       	mul	r24, r16
 438:	01 2d       	mov	r16, r1
 43a:	11 24       	eor	r1, r1
 43c:	10 2f       	mov	r17, r16
 43e:	16 95       	lsr	r17
 440:	16 95       	lsr	r17
 442:	16 95       	lsr	r17
 444:	11 0f       	add	r17, r17
 446:	91 2f       	mov	r25, r17
 448:	99 0f       	add	r25, r25
 44a:	99 0f       	add	r25, r25
 44c:	19 0f       	add	r17, r25
 44e:	81 1b       	sub	r24, r17
 450:	18 2f       	mov	r17, r24
	u8 left_number = Copy_u8NO /10;
 452:	06 95       	lsr	r16
 454:	06 95       	lsr	r16
 456:	06 95       	lsr	r16
	
	u16 i;
	for(i=0 ; i<(DiplayTime/20) ;i++)
 458:	ad ec       	ldi	r26, 0xCD	; 205
 45a:	bc ec       	ldi	r27, 0xCC	; 204
 45c:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <__umulhisi3>
 460:	7c 01       	movw	r14, r24
 462:	f6 94       	lsr	r15
 464:	e7 94       	ror	r14
 466:	f6 94       	lsr	r15
 468:	e7 94       	ror	r14
 46a:	f6 94       	lsr	r15
 46c:	e7 94       	ror	r14
 46e:	f6 94       	lsr	r15
 470:	e7 94       	ror	r14
 472:	e1 14       	cp	r14, r1
 474:	f1 04       	cpc	r15, r1
 476:	41 f1       	breq	.+80     	; 0x4c8 <HSSD_VidDISPLAY+0xa2>
 478:	c0 e0       	ldi	r28, 0x00	; 0
 47a:	d0 e0       	ldi	r29, 0x00	; 0
	{
		MDIO_ERROR_STATE_t_SetPinValue(SSD_EN_PIN1,HIGH);
 47c:	61 e0       	ldi	r22, 0x01	; 1
 47e:	84 e2       	ldi	r24, 0x24	; 36
 480:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
		MDIO_ERROR_STATE_t_SetPinValue(SSD_EN_PIN2,LOW);
 484:	60 e0       	ldi	r22, 0x00	; 0
 486:	85 e2       	ldi	r24, 0x25	; 37
 488:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
		HSSD_VidWriteNumber(right_number);
 48c:	81 2f       	mov	r24, r17
 48e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <HSSD_VidWriteNumber>
 492:	8f e3       	ldi	r24, 0x3F	; 63
 494:	9c e9       	ldi	r25, 0x9C	; 156
 496:	01 97       	sbiw	r24, 0x01	; 1
 498:	f1 f7       	brne	.-4      	; 0x496 <HSSD_VidDISPLAY+0x70>
 49a:	00 c0       	rjmp	.+0      	; 0x49c <HSSD_VidDISPLAY+0x76>
 49c:	00 00       	nop
		_delay_ms(10);
		
		MDIO_ERROR_STATE_t_SetPinValue(SSD_EN_PIN1 ,LOW);
 49e:	60 e0       	ldi	r22, 0x00	; 0
 4a0:	84 e2       	ldi	r24, 0x24	; 36
 4a2:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
		MDIO_ERROR_STATE_t_SetPinValue(SSD_EN_PIN2 , HIGH);
 4a6:	61 e0       	ldi	r22, 0x01	; 1
 4a8:	85 e2       	ldi	r24, 0x25	; 37
 4aa:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
		HSSD_VidWriteNumber(left_number);
 4ae:	80 2f       	mov	r24, r16
 4b0:	0e 94 e7 00 	call	0x1ce	; 0x1ce <HSSD_VidWriteNumber>
 4b4:	8f e3       	ldi	r24, 0x3F	; 63
 4b6:	9c e9       	ldi	r25, 0x9C	; 156
 4b8:	01 97       	sbiw	r24, 0x01	; 1
 4ba:	f1 f7       	brne	.-4      	; 0x4b8 <HSSD_VidDISPLAY+0x92>
 4bc:	00 c0       	rjmp	.+0      	; 0x4be <HSSD_VidDISPLAY+0x98>
 4be:	00 00       	nop
{
	u8 right_number = Copy_u8NO %10;
	u8 left_number = Copy_u8NO /10;
	
	u16 i;
	for(i=0 ; i<(DiplayTime/20) ;i++)
 4c0:	21 96       	adiw	r28, 0x01	; 1
 4c2:	ce 15       	cp	r28, r14
 4c4:	df 05       	cpc	r29, r15
 4c6:	d1 f6       	brne	.-76     	; 0x47c <HSSD_VidDISPLAY+0x56>
		MDIO_ERROR_STATE_t_SetPinValue(SSD_EN_PIN1 ,LOW);
		MDIO_ERROR_STATE_t_SetPinValue(SSD_EN_PIN2 , HIGH);
		HSSD_VidWriteNumber(left_number);
		_delay_ms(10);
	}
		MDIO_ERROR_STATE_t_SetPinValue(SSD_EN_PIN1 ,LOW);
 4c8:	60 e0       	ldi	r22, 0x00	; 0
 4ca:	84 e2       	ldi	r24, 0x24	; 36
 4cc:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
		MDIO_ERROR_STATE_t_SetPinValue(SSD_EN_PIN2 ,LOW);
 4d0:	60 e0       	ldi	r22, 0x00	; 0
 4d2:	85 e2       	ldi	r24, 0x25	; 37
 4d4:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
}
 4d8:	df 91       	pop	r29
 4da:	cf 91       	pop	r28
 4dc:	1f 91       	pop	r17
 4de:	0f 91       	pop	r16
 4e0:	ff 90       	pop	r15
 4e2:	ef 90       	pop	r14
 4e4:	08 95       	ret

000004e6 <HSSD_VidSSDON>:


void HSSD_VidSSDON(void)
{
	MDIO_ERROR_STATE_t_SetPinValue(SSD_EN_PIN1,HIGH);
 4e6:	61 e0       	ldi	r22, 0x01	; 1
 4e8:	84 e2       	ldi	r24, 0x24	; 36
 4ea:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
	MDIO_ERROR_STATE_t_SetPinValue(SSD_EN_PIN2,HIGH);
 4ee:	61 e0       	ldi	r22, 0x01	; 1
 4f0:	85 e2       	ldi	r24, 0x25	; 37
 4f2:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
 4f6:	08 95       	ret

000004f8 <HSSD_VidSSDOFF>:
}

void HSSD_VidSSDOFF(void)
{
	MDIO_ERROR_STATE_t_SetPinValue(SSD_EN_PIN1,LOW);
 4f8:	60 e0       	ldi	r22, 0x00	; 0
 4fa:	84 e2       	ldi	r24, 0x24	; 36
 4fc:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
	MDIO_ERROR_STATE_t_SetPinValue(SSD_EN_PIN2,LOW);
 500:	60 e0       	ldi	r22, 0x00	; 0
 502:	85 e2       	ldi	r24, 0x25	; 37
 504:	0e 94 37 03 	call	0x66e	; 0x66e <MDIO_ERROR_STATE_t_SetPinValue>
 508:	08 95       	ret

0000050a <MDIO_ERROR_STATE_t_SetPinDirection>:

// Mode -> output   , Input
ERROR_STATE_t MDIO_ERROR_STATE_t_SetPinDirection(u8 Copy_u8PinNo , Pin_Mode_t Copy_enuPin_Mode)
{
	ERROR_STATE_t LOC_ERROR_STATE_t_ReturnValue = RET_OK;
	u8 LOC_u8pin = Copy_u8PinNo %10;
 50a:	9d ec       	ldi	r25, 0xCD	; 205
 50c:	89 9f       	mul	r24, r25
 50e:	91 2d       	mov	r25, r1
 510:	11 24       	eor	r1, r1
 512:	96 95       	lsr	r25
 514:	96 95       	lsr	r25
 516:	96 95       	lsr	r25
 518:	99 0f       	add	r25, r25
 51a:	29 2f       	mov	r18, r25
 51c:	22 0f       	add	r18, r18
 51e:	22 0f       	add	r18, r18
 520:	92 0f       	add	r25, r18
 522:	28 2f       	mov	r18, r24
 524:	29 1b       	sub	r18, r25
 526:	92 2f       	mov	r25, r18
	u8 LOC_u8port = Copy_u8PinNo /10;
	
	if((LOC_u8pin>=0) && (LOC_u8pin<=7) && (LOC_u8port>=1) && (LOC_u8port<=4) && ((Copy_enuPin_Mode == OUTPUT) || ((Copy_enuPin_Mode == INPUT))))
 528:	28 30       	cpi	r18, 0x08	; 8
 52a:	08 f0       	brcs	.+2      	; 0x52e <MDIO_ERROR_STATE_t_SetPinDirection+0x24>
 52c:	98 c0       	rjmp	.+304    	; 0x65e <MDIO_ERROR_STATE_t_SetPinDirection+0x154>
// Mode -> output   , Input
ERROR_STATE_t MDIO_ERROR_STATE_t_SetPinDirection(u8 Copy_u8PinNo , Pin_Mode_t Copy_enuPin_Mode)
{
	ERROR_STATE_t LOC_ERROR_STATE_t_ReturnValue = RET_OK;
	u8 LOC_u8pin = Copy_u8PinNo %10;
	u8 LOC_u8port = Copy_u8PinNo /10;
 52e:	2d ec       	ldi	r18, 0xCD	; 205
 530:	82 9f       	mul	r24, r18
 532:	81 2d       	mov	r24, r1
 534:	11 24       	eor	r1, r1
 536:	86 95       	lsr	r24
 538:	86 95       	lsr	r24
 53a:	86 95       	lsr	r24
	
	if((LOC_u8pin>=0) && (LOC_u8pin<=7) && (LOC_u8port>=1) && (LOC_u8port<=4) && ((Copy_enuPin_Mode == OUTPUT) || ((Copy_enuPin_Mode == INPUT))))
 53c:	2f ef       	ldi	r18, 0xFF	; 255
 53e:	28 0f       	add	r18, r24
 540:	24 30       	cpi	r18, 0x04	; 4
 542:	08 f0       	brcs	.+2      	; 0x546 <MDIO_ERROR_STATE_t_SetPinDirection+0x3c>
 544:	8e c0       	rjmp	.+284    	; 0x662 <MDIO_ERROR_STATE_t_SetPinDirection+0x158>
 546:	62 30       	cpi	r22, 0x02	; 2
 548:	08 f0       	brcs	.+2      	; 0x54c <MDIO_ERROR_STATE_t_SetPinDirection+0x42>
 54a:	8d c0       	rjmp	.+282    	; 0x666 <MDIO_ERROR_STATE_t_SetPinDirection+0x15c>
	{
			switch(LOC_u8port)
 54c:	82 30       	cpi	r24, 0x02	; 2
 54e:	51 f1       	breq	.+84     	; 0x5a4 <MDIO_ERROR_STATE_t_SetPinDirection+0x9a>
 550:	18 f4       	brcc	.+6      	; 0x558 <MDIO_ERROR_STATE_t_SetPinDirection+0x4e>
 552:	81 30       	cpi	r24, 0x01	; 1
 554:	41 f0       	breq	.+16     	; 0x566 <MDIO_ERROR_STATE_t_SetPinDirection+0x5c>
 556:	89 c0       	rjmp	.+274    	; 0x66a <MDIO_ERROR_STATE_t_SetPinDirection+0x160>
 558:	83 30       	cpi	r24, 0x03	; 3
 55a:	09 f4       	brne	.+2      	; 0x55e <MDIO_ERROR_STATE_t_SetPinDirection+0x54>
 55c:	42 c0       	rjmp	.+132    	; 0x5e2 <MDIO_ERROR_STATE_t_SetPinDirection+0xd8>
 55e:	84 30       	cpi	r24, 0x04	; 4
 560:	09 f4       	brne	.+2      	; 0x564 <MDIO_ERROR_STATE_t_SetPinDirection+0x5a>
 562:	5e c0       	rjmp	.+188    	; 0x620 <MDIO_ERROR_STATE_t_SetPinDirection+0x116>
 564:	82 c0       	rjmp	.+260    	; 0x66a <MDIO_ERROR_STATE_t_SetPinDirection+0x160>
			{
				case A:
					if(Copy_enuPin_Mode == OUTPUT)
 566:	61 30       	cpi	r22, 0x01	; 1
 568:	71 f4       	brne	.+28     	; 0x586 <MDIO_ERROR_STATE_t_SetPinDirection+0x7c>
					{
						SET_BIT(DDRA,LOC_u8pin);
 56a:	4a b3       	in	r20, 0x1a	; 26
 56c:	21 e0       	ldi	r18, 0x01	; 1
 56e:	30 e0       	ldi	r19, 0x00	; 0
 570:	b9 01       	movw	r22, r18
 572:	02 c0       	rjmp	.+4      	; 0x578 <MDIO_ERROR_STATE_t_SetPinDirection+0x6e>
 574:	66 0f       	add	r22, r22
 576:	77 1f       	adc	r23, r23
 578:	9a 95       	dec	r25
 57a:	e2 f7       	brpl	.-8      	; 0x574 <MDIO_ERROR_STATE_t_SetPinDirection+0x6a>
 57c:	cb 01       	movw	r24, r22
 57e:	84 2b       	or	r24, r20
 580:	8a bb       	out	0x1a, r24	; 26
					break;
				
				default:
					break;
			}  // end switch
			LOC_ERROR_STATE_t_ReturnValue = RET_OK;
 582:	80 e0       	ldi	r24, 0x00	; 0
 584:	08 95       	ret
					{
						SET_BIT(DDRA,LOC_u8pin);
					}
					else
					{
						CLEAR_BIT(DDRA,LOC_u8pin);
 586:	4a b3       	in	r20, 0x1a	; 26
 588:	21 e0       	ldi	r18, 0x01	; 1
 58a:	30 e0       	ldi	r19, 0x00	; 0
 58c:	b9 01       	movw	r22, r18
 58e:	02 c0       	rjmp	.+4      	; 0x594 <MDIO_ERROR_STATE_t_SetPinDirection+0x8a>
 590:	66 0f       	add	r22, r22
 592:	77 1f       	adc	r23, r23
 594:	9a 95       	dec	r25
 596:	e2 f7       	brpl	.-8      	; 0x590 <MDIO_ERROR_STATE_t_SetPinDirection+0x86>
 598:	cb 01       	movw	r24, r22
 59a:	80 95       	com	r24
 59c:	84 23       	and	r24, r20
 59e:	8a bb       	out	0x1a, r24	; 26
					break;
				
				default:
					break;
			}  // end switch
			LOC_ERROR_STATE_t_ReturnValue = RET_OK;
 5a0:	80 e0       	ldi	r24, 0x00	; 0
 5a2:	08 95       	ret
						CLEAR_BIT(DDRA,LOC_u8pin);
					}
					break;
				
				case B:
					if(Copy_enuPin_Mode == OUTPUT)
 5a4:	61 30       	cpi	r22, 0x01	; 1
 5a6:	71 f4       	brne	.+28     	; 0x5c4 <MDIO_ERROR_STATE_t_SetPinDirection+0xba>
					{
						SET_BIT(DDRB, LOC_u8pin);
 5a8:	47 b3       	in	r20, 0x17	; 23
 5aa:	21 e0       	ldi	r18, 0x01	; 1
 5ac:	30 e0       	ldi	r19, 0x00	; 0
 5ae:	b9 01       	movw	r22, r18
 5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <MDIO_ERROR_STATE_t_SetPinDirection+0xac>
 5b2:	66 0f       	add	r22, r22
 5b4:	77 1f       	adc	r23, r23
 5b6:	9a 95       	dec	r25
 5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <MDIO_ERROR_STATE_t_SetPinDirection+0xa8>
 5ba:	cb 01       	movw	r24, r22
 5bc:	84 2b       	or	r24, r20
 5be:	87 bb       	out	0x17, r24	; 23
					break;
				
				default:
					break;
			}  // end switch
			LOC_ERROR_STATE_t_ReturnValue = RET_OK;
 5c0:	80 e0       	ldi	r24, 0x00	; 0
 5c2:	08 95       	ret
					{
						SET_BIT(DDRB, LOC_u8pin);
					}
					else
					{
						CLEAR_BIT(DDRB, LOC_u8pin);
 5c4:	47 b3       	in	r20, 0x17	; 23
 5c6:	21 e0       	ldi	r18, 0x01	; 1
 5c8:	30 e0       	ldi	r19, 0x00	; 0
 5ca:	b9 01       	movw	r22, r18
 5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <MDIO_ERROR_STATE_t_SetPinDirection+0xc8>
 5ce:	66 0f       	add	r22, r22
 5d0:	77 1f       	adc	r23, r23
 5d2:	9a 95       	dec	r25
 5d4:	e2 f7       	brpl	.-8      	; 0x5ce <MDIO_ERROR_STATE_t_SetPinDirection+0xc4>
 5d6:	cb 01       	movw	r24, r22
 5d8:	80 95       	com	r24
 5da:	84 23       	and	r24, r20
 5dc:	87 bb       	out	0x17, r24	; 23
					break;
				
				default:
					break;
			}  // end switch
			LOC_ERROR_STATE_t_ReturnValue = RET_OK;
 5de:	80 e0       	ldi	r24, 0x00	; 0
 5e0:	08 95       	ret
						CLEAR_BIT(DDRB, LOC_u8pin);
					}
					break;
				
				case C:
					if(Copy_enuPin_Mode == OUTPUT)
 5e2:	61 30       	cpi	r22, 0x01	; 1
 5e4:	71 f4       	brne	.+28     	; 0x602 <MDIO_ERROR_STATE_t_SetPinDirection+0xf8>
					{
						SET_BIT(DDRC, LOC_u8pin);
 5e6:	44 b3       	in	r20, 0x14	; 20
 5e8:	21 e0       	ldi	r18, 0x01	; 1
 5ea:	30 e0       	ldi	r19, 0x00	; 0
 5ec:	b9 01       	movw	r22, r18
 5ee:	02 c0       	rjmp	.+4      	; 0x5f4 <MDIO_ERROR_STATE_t_SetPinDirection+0xea>
 5f0:	66 0f       	add	r22, r22
 5f2:	77 1f       	adc	r23, r23
 5f4:	9a 95       	dec	r25
 5f6:	e2 f7       	brpl	.-8      	; 0x5f0 <MDIO_ERROR_STATE_t_SetPinDirection+0xe6>
 5f8:	cb 01       	movw	r24, r22
 5fa:	84 2b       	or	r24, r20
 5fc:	84 bb       	out	0x14, r24	; 20
					break;
				
				default:
					break;
			}  // end switch
			LOC_ERROR_STATE_t_ReturnValue = RET_OK;
 5fe:	80 e0       	ldi	r24, 0x00	; 0
 600:	08 95       	ret
					{
						SET_BIT(DDRC, LOC_u8pin);
					}
					else
					{
						CLEAR_BIT(DDRC, LOC_u8pin);
 602:	44 b3       	in	r20, 0x14	; 20
 604:	21 e0       	ldi	r18, 0x01	; 1
 606:	30 e0       	ldi	r19, 0x00	; 0
 608:	b9 01       	movw	r22, r18
 60a:	02 c0       	rjmp	.+4      	; 0x610 <MDIO_ERROR_STATE_t_SetPinDirection+0x106>
 60c:	66 0f       	add	r22, r22
 60e:	77 1f       	adc	r23, r23
 610:	9a 95       	dec	r25
 612:	e2 f7       	brpl	.-8      	; 0x60c <MDIO_ERROR_STATE_t_SetPinDirection+0x102>
 614:	cb 01       	movw	r24, r22
 616:	80 95       	com	r24
 618:	84 23       	and	r24, r20
 61a:	84 bb       	out	0x14, r24	; 20
					break;
				
				default:
					break;
			}  // end switch
			LOC_ERROR_STATE_t_ReturnValue = RET_OK;
 61c:	80 e0       	ldi	r24, 0x00	; 0
 61e:	08 95       	ret
						CLEAR_BIT(DDRC, LOC_u8pin);
					}
					break;
				
				case D:
					if(Copy_enuPin_Mode == OUTPUT)
 620:	61 30       	cpi	r22, 0x01	; 1
 622:	71 f4       	brne	.+28     	; 0x640 <MDIO_ERROR_STATE_t_SetPinDirection+0x136>
					{
						SET_BIT(DDRD, LOC_u8pin);
 624:	41 b3       	in	r20, 0x11	; 17
 626:	21 e0       	ldi	r18, 0x01	; 1
 628:	30 e0       	ldi	r19, 0x00	; 0
 62a:	b9 01       	movw	r22, r18
 62c:	02 c0       	rjmp	.+4      	; 0x632 <MDIO_ERROR_STATE_t_SetPinDirection+0x128>
 62e:	66 0f       	add	r22, r22
 630:	77 1f       	adc	r23, r23
 632:	9a 95       	dec	r25
 634:	e2 f7       	brpl	.-8      	; 0x62e <MDIO_ERROR_STATE_t_SetPinDirection+0x124>
 636:	cb 01       	movw	r24, r22
 638:	84 2b       	or	r24, r20
 63a:	81 bb       	out	0x11, r24	; 17
					break;
				
				default:
					break;
			}  // end switch
			LOC_ERROR_STATE_t_ReturnValue = RET_OK;
 63c:	80 e0       	ldi	r24, 0x00	; 0
 63e:	08 95       	ret
					{
						SET_BIT(DDRD, LOC_u8pin);
					}
					else
					{
						CLEAR_BIT(DDRD, LOC_u8pin);
 640:	41 b3       	in	r20, 0x11	; 17
 642:	21 e0       	ldi	r18, 0x01	; 1
 644:	30 e0       	ldi	r19, 0x00	; 0
 646:	b9 01       	movw	r22, r18
 648:	02 c0       	rjmp	.+4      	; 0x64e <MDIO_ERROR_STATE_t_SetPinDirection+0x144>
 64a:	66 0f       	add	r22, r22
 64c:	77 1f       	adc	r23, r23
 64e:	9a 95       	dec	r25
 650:	e2 f7       	brpl	.-8      	; 0x64a <MDIO_ERROR_STATE_t_SetPinDirection+0x140>
 652:	cb 01       	movw	r24, r22
 654:	80 95       	com	r24
 656:	84 23       	and	r24, r20
 658:	81 bb       	out	0x11, r24	; 17
					break;
				
				default:
					break;
			}  // end switch
			LOC_ERROR_STATE_t_ReturnValue = RET_OK;
 65a:	80 e0       	ldi	r24, 0x00	; 0
 65c:	08 95       	ret
	}  // end if
	
	
	else
	{
		LOC_ERROR_STATE_t_ReturnValue =RET_NOK;
 65e:	81 e0       	ldi	r24, 0x01	; 1
 660:	08 95       	ret
 662:	81 e0       	ldi	r24, 0x01	; 1
 664:	08 95       	ret
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	08 95       	ret
					break;
				
				default:
					break;
			}  // end switch
			LOC_ERROR_STATE_t_ReturnValue = RET_OK;
 66a:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		LOC_ERROR_STATE_t_ReturnValue =RET_NOK;
	}
	return LOC_ERROR_STATE_t_ReturnValue;
}
 66c:	08 95       	ret

0000066e <MDIO_ERROR_STATE_t_SetPinValue>:

// State -> HIGH   , LOW
ERROR_STATE_t MDIO_ERROR_STATE_t_SetPinValue(u8 Copy_u8PinNo , Pin_State_t Copy_enuPin_State)
{
	ERROR_STATE_t LOC_ERROR_STATE_t_ReturnValue = RET_OK;
	u8 LOC_u8pin = Copy_u8PinNo %10;
 66e:	9d ec       	ldi	r25, 0xCD	; 205
 670:	89 9f       	mul	r24, r25
 672:	91 2d       	mov	r25, r1
 674:	11 24       	eor	r1, r1
 676:	96 95       	lsr	r25
 678:	96 95       	lsr	r25
 67a:	96 95       	lsr	r25
 67c:	99 0f       	add	r25, r25
 67e:	29 2f       	mov	r18, r25
 680:	22 0f       	add	r18, r18
 682:	22 0f       	add	r18, r18
 684:	92 0f       	add	r25, r18
 686:	28 2f       	mov	r18, r24
 688:	29 1b       	sub	r18, r25
 68a:	92 2f       	mov	r25, r18
	u8 LOC_u8port = Copy_u8PinNo /10;
		
	if((LOC_u8pin>=0) && (LOC_u8pin<=7) && (LOC_u8port>=1) && (LOC_u8port<=4) && ((Copy_enuPin_State == HIGH) || ((Copy_enuPin_State == LOW))))
 68c:	28 30       	cpi	r18, 0x08	; 8
 68e:	08 f0       	brcs	.+2      	; 0x692 <MDIO_ERROR_STATE_t_SetPinValue+0x24>
 690:	98 c0       	rjmp	.+304    	; 0x7c2 <MDIO_ERROR_STATE_t_SetPinValue+0x154>
// State -> HIGH   , LOW
ERROR_STATE_t MDIO_ERROR_STATE_t_SetPinValue(u8 Copy_u8PinNo , Pin_State_t Copy_enuPin_State)
{
	ERROR_STATE_t LOC_ERROR_STATE_t_ReturnValue = RET_OK;
	u8 LOC_u8pin = Copy_u8PinNo %10;
	u8 LOC_u8port = Copy_u8PinNo /10;
 692:	2d ec       	ldi	r18, 0xCD	; 205
 694:	82 9f       	mul	r24, r18
 696:	81 2d       	mov	r24, r1
 698:	11 24       	eor	r1, r1
 69a:	86 95       	lsr	r24
 69c:	86 95       	lsr	r24
 69e:	86 95       	lsr	r24
		
	if((LOC_u8pin>=0) && (LOC_u8pin<=7) && (LOC_u8port>=1) && (LOC_u8port<=4) && ((Copy_enuPin_State == HIGH) || ((Copy_enuPin_State == LOW))))
 6a0:	2f ef       	ldi	r18, 0xFF	; 255
 6a2:	28 0f       	add	r18, r24
 6a4:	24 30       	cpi	r18, 0x04	; 4
 6a6:	08 f0       	brcs	.+2      	; 0x6aa <MDIO_ERROR_STATE_t_SetPinValue+0x3c>
 6a8:	8e c0       	rjmp	.+284    	; 0x7c6 <MDIO_ERROR_STATE_t_SetPinValue+0x158>
 6aa:	62 30       	cpi	r22, 0x02	; 2
 6ac:	08 f0       	brcs	.+2      	; 0x6b0 <MDIO_ERROR_STATE_t_SetPinValue+0x42>
 6ae:	8d c0       	rjmp	.+282    	; 0x7ca <MDIO_ERROR_STATE_t_SetPinValue+0x15c>
	{
		switch(LOC_u8port)
 6b0:	82 30       	cpi	r24, 0x02	; 2
 6b2:	51 f1       	breq	.+84     	; 0x708 <MDIO_ERROR_STATE_t_SetPinValue+0x9a>
 6b4:	18 f4       	brcc	.+6      	; 0x6bc <MDIO_ERROR_STATE_t_SetPinValue+0x4e>
 6b6:	81 30       	cpi	r24, 0x01	; 1
 6b8:	41 f0       	breq	.+16     	; 0x6ca <MDIO_ERROR_STATE_t_SetPinValue+0x5c>
 6ba:	89 c0       	rjmp	.+274    	; 0x7ce <MDIO_ERROR_STATE_t_SetPinValue+0x160>
 6bc:	83 30       	cpi	r24, 0x03	; 3
 6be:	09 f4       	brne	.+2      	; 0x6c2 <MDIO_ERROR_STATE_t_SetPinValue+0x54>
 6c0:	42 c0       	rjmp	.+132    	; 0x746 <MDIO_ERROR_STATE_t_SetPinValue+0xd8>
 6c2:	84 30       	cpi	r24, 0x04	; 4
 6c4:	09 f4       	brne	.+2      	; 0x6c8 <MDIO_ERROR_STATE_t_SetPinValue+0x5a>
 6c6:	5e c0       	rjmp	.+188    	; 0x784 <MDIO_ERROR_STATE_t_SetPinValue+0x116>
 6c8:	82 c0       	rjmp	.+260    	; 0x7ce <MDIO_ERROR_STATE_t_SetPinValue+0x160>
		{
			case A:
				if(Copy_enuPin_State == HIGH)
 6ca:	61 30       	cpi	r22, 0x01	; 1
 6cc:	71 f4       	brne	.+28     	; 0x6ea <MDIO_ERROR_STATE_t_SetPinValue+0x7c>
				{
					SET_BIT(PORTA,LOC_u8pin);
 6ce:	4b b3       	in	r20, 0x1b	; 27
 6d0:	21 e0       	ldi	r18, 0x01	; 1
 6d2:	30 e0       	ldi	r19, 0x00	; 0
 6d4:	b9 01       	movw	r22, r18
 6d6:	02 c0       	rjmp	.+4      	; 0x6dc <MDIO_ERROR_STATE_t_SetPinValue+0x6e>
 6d8:	66 0f       	add	r22, r22
 6da:	77 1f       	adc	r23, r23
 6dc:	9a 95       	dec	r25
 6de:	e2 f7       	brpl	.-8      	; 0x6d8 <MDIO_ERROR_STATE_t_SetPinValue+0x6a>
 6e0:	cb 01       	movw	r24, r22
 6e2:	84 2b       	or	r24, r20
 6e4:	8b bb       	out	0x1b, r24	; 27
				break;
			
			default:
				break;
		} // end switch
		LOC_ERROR_STATE_t_ReturnValue = RET_OK;
 6e6:	80 e0       	ldi	r24, 0x00	; 0
 6e8:	08 95       	ret
				{
					SET_BIT(PORTA,LOC_u8pin);
				}
				else
				{
					CLEAR_BIT(PORTA,LOC_u8pin);
 6ea:	4b b3       	in	r20, 0x1b	; 27
 6ec:	21 e0       	ldi	r18, 0x01	; 1
 6ee:	30 e0       	ldi	r19, 0x00	; 0
 6f0:	b9 01       	movw	r22, r18
 6f2:	02 c0       	rjmp	.+4      	; 0x6f8 <MDIO_ERROR_STATE_t_SetPinValue+0x8a>
 6f4:	66 0f       	add	r22, r22
 6f6:	77 1f       	adc	r23, r23
 6f8:	9a 95       	dec	r25
 6fa:	e2 f7       	brpl	.-8      	; 0x6f4 <MDIO_ERROR_STATE_t_SetPinValue+0x86>
 6fc:	cb 01       	movw	r24, r22
 6fe:	80 95       	com	r24
 700:	84 23       	and	r24, r20
 702:	8b bb       	out	0x1b, r24	; 27
				break;
			
			default:
				break;
		} // end switch
		LOC_ERROR_STATE_t_ReturnValue = RET_OK;
 704:	80 e0       	ldi	r24, 0x00	; 0
 706:	08 95       	ret
					CLEAR_BIT(PORTA,LOC_u8pin);
				}
				break;
			
			case B:
				if(Copy_enuPin_State == HIGH)
 708:	61 30       	cpi	r22, 0x01	; 1
 70a:	71 f4       	brne	.+28     	; 0x728 <MDIO_ERROR_STATE_t_SetPinValue+0xba>
				{
					SET_BIT(PORTB, LOC_u8pin);
 70c:	48 b3       	in	r20, 0x18	; 24
 70e:	21 e0       	ldi	r18, 0x01	; 1
 710:	30 e0       	ldi	r19, 0x00	; 0
 712:	b9 01       	movw	r22, r18
 714:	02 c0       	rjmp	.+4      	; 0x71a <MDIO_ERROR_STATE_t_SetPinValue+0xac>
 716:	66 0f       	add	r22, r22
 718:	77 1f       	adc	r23, r23
 71a:	9a 95       	dec	r25
 71c:	e2 f7       	brpl	.-8      	; 0x716 <MDIO_ERROR_STATE_t_SetPinValue+0xa8>
 71e:	cb 01       	movw	r24, r22
 720:	84 2b       	or	r24, r20
 722:	88 bb       	out	0x18, r24	; 24
				break;
			
			default:
				break;
		} // end switch
		LOC_ERROR_STATE_t_ReturnValue = RET_OK;
 724:	80 e0       	ldi	r24, 0x00	; 0
 726:	08 95       	ret
				{
					SET_BIT(PORTB, LOC_u8pin);
				}
				else
				{
					CLEAR_BIT(PORTB, LOC_u8pin);
 728:	48 b3       	in	r20, 0x18	; 24
 72a:	21 e0       	ldi	r18, 0x01	; 1
 72c:	30 e0       	ldi	r19, 0x00	; 0
 72e:	b9 01       	movw	r22, r18
 730:	02 c0       	rjmp	.+4      	; 0x736 <MDIO_ERROR_STATE_t_SetPinValue+0xc8>
 732:	66 0f       	add	r22, r22
 734:	77 1f       	adc	r23, r23
 736:	9a 95       	dec	r25
 738:	e2 f7       	brpl	.-8      	; 0x732 <MDIO_ERROR_STATE_t_SetPinValue+0xc4>
 73a:	cb 01       	movw	r24, r22
 73c:	80 95       	com	r24
 73e:	84 23       	and	r24, r20
 740:	88 bb       	out	0x18, r24	; 24
				break;
			
			default:
				break;
		} // end switch
		LOC_ERROR_STATE_t_ReturnValue = RET_OK;
 742:	80 e0       	ldi	r24, 0x00	; 0
 744:	08 95       	ret
					CLEAR_BIT(PORTB, LOC_u8pin);
				}
				break;
			
			case C:
				if(Copy_enuPin_State == HIGH)
 746:	61 30       	cpi	r22, 0x01	; 1
 748:	71 f4       	brne	.+28     	; 0x766 <MDIO_ERROR_STATE_t_SetPinValue+0xf8>
				{
					SET_BIT(PORTC, LOC_u8pin);
 74a:	45 b3       	in	r20, 0x15	; 21
 74c:	21 e0       	ldi	r18, 0x01	; 1
 74e:	30 e0       	ldi	r19, 0x00	; 0
 750:	b9 01       	movw	r22, r18
 752:	02 c0       	rjmp	.+4      	; 0x758 <MDIO_ERROR_STATE_t_SetPinValue+0xea>
 754:	66 0f       	add	r22, r22
 756:	77 1f       	adc	r23, r23
 758:	9a 95       	dec	r25
 75a:	e2 f7       	brpl	.-8      	; 0x754 <MDIO_ERROR_STATE_t_SetPinValue+0xe6>
 75c:	cb 01       	movw	r24, r22
 75e:	84 2b       	or	r24, r20
 760:	85 bb       	out	0x15, r24	; 21
				break;
			
			default:
				break;
		} // end switch
		LOC_ERROR_STATE_t_ReturnValue = RET_OK;
 762:	80 e0       	ldi	r24, 0x00	; 0
 764:	08 95       	ret
				{
					SET_BIT(PORTC, LOC_u8pin);
				}
				else
				{
					CLEAR_BIT(PORTC, LOC_u8pin);
 766:	45 b3       	in	r20, 0x15	; 21
 768:	21 e0       	ldi	r18, 0x01	; 1
 76a:	30 e0       	ldi	r19, 0x00	; 0
 76c:	b9 01       	movw	r22, r18
 76e:	02 c0       	rjmp	.+4      	; 0x774 <MDIO_ERROR_STATE_t_SetPinValue+0x106>
 770:	66 0f       	add	r22, r22
 772:	77 1f       	adc	r23, r23
 774:	9a 95       	dec	r25
 776:	e2 f7       	brpl	.-8      	; 0x770 <MDIO_ERROR_STATE_t_SetPinValue+0x102>
 778:	cb 01       	movw	r24, r22
 77a:	80 95       	com	r24
 77c:	84 23       	and	r24, r20
 77e:	85 bb       	out	0x15, r24	; 21
				break;
			
			default:
				break;
		} // end switch
		LOC_ERROR_STATE_t_ReturnValue = RET_OK;
 780:	80 e0       	ldi	r24, 0x00	; 0
 782:	08 95       	ret
					CLEAR_BIT(PORTC, LOC_u8pin);
				}
				break;
			
			case D:
				if(Copy_enuPin_State == HIGH)
 784:	61 30       	cpi	r22, 0x01	; 1
 786:	71 f4       	brne	.+28     	; 0x7a4 <MDIO_ERROR_STATE_t_SetPinValue+0x136>
				{
					SET_BIT(PORTD, LOC_u8pin);
 788:	42 b3       	in	r20, 0x12	; 18
 78a:	21 e0       	ldi	r18, 0x01	; 1
 78c:	30 e0       	ldi	r19, 0x00	; 0
 78e:	b9 01       	movw	r22, r18
 790:	02 c0       	rjmp	.+4      	; 0x796 <MDIO_ERROR_STATE_t_SetPinValue+0x128>
 792:	66 0f       	add	r22, r22
 794:	77 1f       	adc	r23, r23
 796:	9a 95       	dec	r25
 798:	e2 f7       	brpl	.-8      	; 0x792 <MDIO_ERROR_STATE_t_SetPinValue+0x124>
 79a:	cb 01       	movw	r24, r22
 79c:	84 2b       	or	r24, r20
 79e:	82 bb       	out	0x12, r24	; 18
				break;
			
			default:
				break;
		} // end switch
		LOC_ERROR_STATE_t_ReturnValue = RET_OK;
 7a0:	80 e0       	ldi	r24, 0x00	; 0
 7a2:	08 95       	ret
				{
					SET_BIT(PORTD, LOC_u8pin);
				}
				else
				{
					CLEAR_BIT(PORTD, LOC_u8pin);
 7a4:	42 b3       	in	r20, 0x12	; 18
 7a6:	21 e0       	ldi	r18, 0x01	; 1
 7a8:	30 e0       	ldi	r19, 0x00	; 0
 7aa:	b9 01       	movw	r22, r18
 7ac:	02 c0       	rjmp	.+4      	; 0x7b2 <MDIO_ERROR_STATE_t_SetPinValue+0x144>
 7ae:	66 0f       	add	r22, r22
 7b0:	77 1f       	adc	r23, r23
 7b2:	9a 95       	dec	r25
 7b4:	e2 f7       	brpl	.-8      	; 0x7ae <MDIO_ERROR_STATE_t_SetPinValue+0x140>
 7b6:	cb 01       	movw	r24, r22
 7b8:	80 95       	com	r24
 7ba:	84 23       	and	r24, r20
 7bc:	82 bb       	out	0x12, r24	; 18
				break;
			
			default:
				break;
		} // end switch
		LOC_ERROR_STATE_t_ReturnValue = RET_OK;
 7be:	80 e0       	ldi	r24, 0x00	; 0
 7c0:	08 95       	ret
	} // end if
	
	else
	{
		LOC_ERROR_STATE_t_ReturnValue =RET_NOK;
 7c2:	81 e0       	ldi	r24, 0x01	; 1
 7c4:	08 95       	ret
 7c6:	81 e0       	ldi	r24, 0x01	; 1
 7c8:	08 95       	ret
 7ca:	81 e0       	ldi	r24, 0x01	; 1
 7cc:	08 95       	ret
				break;
			
			default:
				break;
		} // end switch
		LOC_ERROR_STATE_t_ReturnValue = RET_OK;
 7ce:	80 e0       	ldi	r24, 0x00	; 0
	else
	{
		LOC_ERROR_STATE_t_ReturnValue =RET_NOK;
	}
	return LOC_ERROR_STATE_t_ReturnValue;
}
 7d0:	08 95       	ret

000007d2 <__vector_1>:
 * Arguments   : function pointer to function that will be executed in main Program.
 * return      : Nothing.
 ******************************************************************************/
void MEXTI2_SetCallBack(void (* CopyFunPtr)(void))
{
	CallBackPtr2 = CopyFunPtr;
 7d2:	1f 92       	push	r1
 7d4:	0f 92       	push	r0
 7d6:	0f b6       	in	r0, 0x3f	; 63
 7d8:	0f 92       	push	r0
 7da:	11 24       	eor	r1, r1
 7dc:	2f 93       	push	r18
 7de:	3f 93       	push	r19
 7e0:	4f 93       	push	r20
 7e2:	5f 93       	push	r21
 7e4:	6f 93       	push	r22
 7e6:	7f 93       	push	r23
 7e8:	8f 93       	push	r24
 7ea:	9f 93       	push	r25
 7ec:	af 93       	push	r26
 7ee:	bf 93       	push	r27
 7f0:	ef 93       	push	r30
 7f2:	ff 93       	push	r31
 7f4:	e0 91 61 00 	lds	r30, 0x0061	; 0x800061 <CallBackPtr0>
 7f8:	f0 91 62 00 	lds	r31, 0x0062	; 0x800062 <CallBackPtr0+0x1>
 7fc:	30 97       	sbiw	r30, 0x00	; 0
 7fe:	09 f0       	breq	.+2      	; 0x802 <__vector_1+0x30>
 800:	09 95       	icall
 802:	ff 91       	pop	r31
 804:	ef 91       	pop	r30
 806:	bf 91       	pop	r27
 808:	af 91       	pop	r26
 80a:	9f 91       	pop	r25
 80c:	8f 91       	pop	r24
 80e:	7f 91       	pop	r23
 810:	6f 91       	pop	r22
 812:	5f 91       	pop	r21
 814:	4f 91       	pop	r20
 816:	3f 91       	pop	r19
 818:	2f 91       	pop	r18
 81a:	0f 90       	pop	r0
 81c:	0f be       	out	0x3f, r0	; 63
 81e:	0f 90       	pop	r0
 820:	1f 90       	pop	r1
 822:	18 95       	reti

00000824 <__vector_2>:
 824:	1f 92       	push	r1
 826:	0f 92       	push	r0
 828:	0f b6       	in	r0, 0x3f	; 63
 82a:	0f 92       	push	r0
 82c:	11 24       	eor	r1, r1
 82e:	2f 93       	push	r18
 830:	3f 93       	push	r19
 832:	4f 93       	push	r20
 834:	5f 93       	push	r21
 836:	6f 93       	push	r22
 838:	7f 93       	push	r23
 83a:	8f 93       	push	r24
 83c:	9f 93       	push	r25
 83e:	af 93       	push	r26
 840:	bf 93       	push	r27
 842:	ef 93       	push	r30
 844:	ff 93       	push	r31
 846:	e0 91 65 00 	lds	r30, 0x0065	; 0x800065 <CallBackPtr1>
 84a:	f0 91 66 00 	lds	r31, 0x0066	; 0x800066 <CallBackPtr1+0x1>
 84e:	30 97       	sbiw	r30, 0x00	; 0
 850:	09 f0       	breq	.+2      	; 0x854 <__vector_2+0x30>
 852:	09 95       	icall
 854:	ff 91       	pop	r31
 856:	ef 91       	pop	r30
 858:	bf 91       	pop	r27
 85a:	af 91       	pop	r26
 85c:	9f 91       	pop	r25
 85e:	8f 91       	pop	r24
 860:	7f 91       	pop	r23
 862:	6f 91       	pop	r22
 864:	5f 91       	pop	r21
 866:	4f 91       	pop	r20
 868:	3f 91       	pop	r19
 86a:	2f 91       	pop	r18
 86c:	0f 90       	pop	r0
 86e:	0f be       	out	0x3f, r0	; 63
 870:	0f 90       	pop	r0
 872:	1f 90       	pop	r1
 874:	18 95       	reti

00000876 <__vector_3>:
 * Description : this Function is Called when External Interrupt[2] is occurred.
 * Arguments   : Nothing.
 * return      : Nothing.
 ******************************************************************************/
void __vector_3(void)
{
 876:	1f 92       	push	r1
 878:	0f 92       	push	r0
 87a:	0f b6       	in	r0, 0x3f	; 63
 87c:	0f 92       	push	r0
 87e:	11 24       	eor	r1, r1
 880:	2f 93       	push	r18
 882:	3f 93       	push	r19
 884:	4f 93       	push	r20
 886:	5f 93       	push	r21
 888:	6f 93       	push	r22
 88a:	7f 93       	push	r23
 88c:	8f 93       	push	r24
 88e:	9f 93       	push	r25
 890:	af 93       	push	r26
 892:	bf 93       	push	r27
 894:	ef 93       	push	r30
 896:	ff 93       	push	r31
	if(CallBackPtr2 != NULL)
 898:	e0 91 63 00 	lds	r30, 0x0063	; 0x800063 <CallBackPtr2>
 89c:	f0 91 64 00 	lds	r31, 0x0064	; 0x800064 <CallBackPtr2+0x1>
 8a0:	30 97       	sbiw	r30, 0x00	; 0
 8a2:	09 f0       	breq	.+2      	; 0x8a6 <__vector_3+0x30>
	{
		CallBackPtr2();
 8a4:	09 95       	icall
	}
 8a6:	ff 91       	pop	r31
 8a8:	ef 91       	pop	r30
 8aa:	bf 91       	pop	r27
 8ac:	af 91       	pop	r26
 8ae:	9f 91       	pop	r25
 8b0:	8f 91       	pop	r24
 8b2:	7f 91       	pop	r23
 8b4:	6f 91       	pop	r22
 8b6:	5f 91       	pop	r21
 8b8:	4f 91       	pop	r20
 8ba:	3f 91       	pop	r19
 8bc:	2f 91       	pop	r18
 8be:	0f 90       	pop	r0
 8c0:	0f be       	out	0x3f, r0	; 63
 8c2:	0f 90       	pop	r0
 8c4:	1f 90       	pop	r1
 8c6:	18 95       	reti

000008c8 <__tablejump2__>:
 8c8:	ee 0f       	add	r30, r30
 8ca:	ff 1f       	adc	r31, r31
 8cc:	05 90       	lpm	r0, Z+
 8ce:	f4 91       	lpm	r31, Z
 8d0:	e0 2d       	mov	r30, r0
 8d2:	09 94       	ijmp

000008d4 <__umulhisi3>:
 8d4:	a2 9f       	mul	r26, r18
 8d6:	b0 01       	movw	r22, r0
 8d8:	b3 9f       	mul	r27, r19
 8da:	c0 01       	movw	r24, r0
 8dc:	a3 9f       	mul	r26, r19
 8de:	70 0d       	add	r23, r0
 8e0:	81 1d       	adc	r24, r1
 8e2:	11 24       	eor	r1, r1
 8e4:	91 1d       	adc	r25, r1
 8e6:	b2 9f       	mul	r27, r18
 8e8:	70 0d       	add	r23, r0
 8ea:	81 1d       	adc	r24, r1
 8ec:	11 24       	eor	r1, r1
 8ee:	91 1d       	adc	r25, r1
 8f0:	08 95       	ret

000008f2 <_exit>:
 8f2:	f8 94       	cli

000008f4 <__stop_program>:
 8f4:	ff cf       	rjmp	.-2      	; 0x8f4 <__stop_program>
